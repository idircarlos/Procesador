Terminales = { if for let int boolean string function return print input id entero cadena = %= ( ) { } , ; - ! < }
NoTerminales = { S1 S A B B1 C C1 C2 C3 F F1 F2 G H K L Q T X E E1 E2 E3 }
Axioma = S
Producciones = {
S1 -> S
S -> B S
S -> F S
S -> lambda
B -> let T id B1 ;
B -> if ( E ) C
B -> C 
B -> for ( F1 ; E ; F2 ) { G } 
B1 -> = E
B1 -> lambda 
C -> C1
C -> C2
C -> C3
C1 -> id = E ;
C2 -> print ( E ) ;
C2 -> input ( id ) ;
C2 -> id ( L ) ;
C2 -> return X ;
C3 -> id %= E ;
A -> T id K 
A -> lambda
F -> function id H ( A ) { G }
F1 -> C
F1 -> lambda
F2 -> C1
F2 -> C3
F2 -> lambda
G -> B G 
G -> lambda
H -> T
H -> lambda
K -> , T id K 
K -> lambda
L -> E Q
L -> lambda
Q -> , E Q 
Q -> lambda
T -> int
T -> string
T -> boolean
X -> E
X -> lambda 
E -> E < E1
E -> E1
E1 -> E1 - E2
E1 -> E2
E2 -> ! E2
E2 -> E3
E3 -> ( E )
E3 -> id
E3 -> id ( L )
E3 -> entero
E3 -> cadena
}